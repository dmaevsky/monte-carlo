version: 1.1
nodes:
  m = 1000000
  naive = estimate_pi(m)
  x = tf.randomUniform([m])
  y = tf.randomUniform([m])
  $34 = tf.getBackend()
  tf_pi = tf.tidy(() => tf.mean(x*x + y*y < 1)*4)
  n = 10
  m_min = 2000
  r = range(n)
  npaths = r.map(i => m_min * (1 << i))
  runs = npaths.map(mm => Object.assign({ npaths:mm }, estimate_pi(mm)))
  convergencePlot = plot(runs, piPlot)
layout:
[,
  [,
    {
      "node": "m"
    },
    {
      "value": "// naive = estimate_pi(m)"
    }
  ],
  [,,
    {
      "node": "naive",
      "expansion": {
        "vertical": true,
        "labelsLeft": true,
        "secondary": false,
        "height": 2,
        "width": 1
      }
    }
  ],,,
  [,,
    {
      "value": "// x = tf.randomUniform([m])"
    },,,
    {
      "value": "//y = tf.randomUniform([m])"
    }
  ],
  [,
    {
      "value": "x"
    },
    {
      "node": "x"
    }
  ],
  [,
    {
      "value": "y"
    },
    {
      "node": "y"
    }
  ],,
  [,
    {
      "value": "Backend"
    },
    {
      "node": "$34"
    }
  ],
  [,
    {
      "node": "tf_pi"
    }
  ],,
  [,
    {
      "node": "n"
    },
    {
      "node": "m_min"
    }
  ],
  [,,
    {
      "value": "m"
    },
    {
      "value": "// runs = npaths.map(mm => Object.assign({ npaths:mm }, estimate_pi(mm)))"
    },,,,,,
    {
      "value": "// convergencePlot = plot(runs, piPlot)"
    }
  ],
  [,
    {
      "node": "r",
      "expansion": {
        "vertical": true,
        "labelsLeft": false,
        "labelsTop": false,
        "height": 10,
        "width": 1
      }
    },
    {
      "node": "npaths",
      "expansion": {
        "vertical": true,
        "height": 10,
        "width": 1
      }
    },
    {
      "node": "runs",
      "expansion": {
        "vertical": true,
        "secondary": true,
        "labelsTop": false,
        "height": 10,
        "width": 3
      }
    },,,,,,
    {
      "node": "convergencePlot"
    }
  ]
]
